openapi: 3.0.3
info:
  title: Swagger BeamEye - OpenAPI 3.0
  version: 1.0.11

tags:
- name: user
  description: Operations about user
- name: people
  description: Operations about profiles
paths:
  /userNew:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
      - name: email
        in: query
        description: The email for login
        required: true
        schema:
          type: string
          format: email
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid email/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /userDelete:
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: email
        in: path
        description: The email that needs to be deleted
        required: true
        schema:
          type: string
          format: email
      responses:
        '400':
          description: Invalid email supplied
        '404':
          description: User not found
  /people:
    get:
      tags:
      - people
      summary: Get profiles
      description: Show the profiles to the logged in user
      operationId: getProfiles
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '400':
          description: No profiles can be shown to user.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          format: email
          example: john@email.com
        password:
          type: string
          example: '12345'

    Profile:
      type: object
      properties:
        profile_id:
          type: integer
          format: int64
          example: 15
        first_name:
          type: string
          example: Anton
        last_name:
          type: string
          example: Antonov
        height:
          type: integer
          format: int32
          example: 175
        birthday:
          type: object
          properties:
            day:
              type: integer
              format: int32
              example: 28
            month:
              type: integer
              format: int32
              example: 3
            year:
              type: integer
              format: int64
              example: 2005
        avatar:
          type: object
        description:
          type: string
        location:
          type: string
        interests:
          type: array
          items:
            type: string
            example: "playing football"
        preferences:
          type: object
          properties:
            preferences_id:
              type: integer
              format: int64
              example: 123
            interests:
              type: array
              items:
                type: string
                example: "singing"
            age:
              type: object
              properties:
                from:
                  type: integer
                  format: int32
                  example: 18
                to:
                  type: integer
                  format: int32
                  example: 20
            location:
              type: string
        liked_by:
          type: array
          items:
            type: integer
            format: int64
            example: 12356
